var spawn = require("child_process").spawn;
var util  = require("util");
var config;

switch(process.platform) {
	case "darwin": config = require("./platform/darwin"); break;
	case "win32":  config = require("./platform/win32");  break;
	case "linux":  config = require("./platform/linux");  break;
	default: throw "Unknown platform: '" + process.platform + "'.  Send this error to xavi.rmz@gmail.com.";
}

// Stores 'text' to clipboard
function set_clipboard(text, cb) {
	var child = spawn(config.copy.command, config.copy.args);

	var err = [];
	child
		.on("exit", function() {
			if(cb) { cb(null, text); }
			else { console.log("Copy complete"); }
		})
		.on("error", function(err) { cb(err); })
		.stderr
			.on("data", function(chunk) { err.push(chunk); })
			.on("end", function() {
				if(err.length === 0) { return; }
				var error = err.join("");

				if(cb) { cb(error); }
				else { console.log(error); }
			})
	;

	if(text.pipe) { text.pipe(child.stdin); }
	else {
		var type = Object.prototype.toString.call(text);

		if(type === "[object String]") { child.stdin.end(text); }
		else if(type === "[object Object]") { child.stdin.end(util.inspect(text, { depth: null })); }
		else if(type === "[object Array]") { child.stdin.end(util.inspect(text, { depth: null })); }
		else { child.stdin.end(text.toString()); }
	}

	return text;
};

// Gets data from clipboard
// cb = A callback that will send the clipboard contents as the second param
// or an err as the first parameter.
function get_clipboard(cb) {
    
    var child = spawn(config.paste.command, config.paste.args);
    var data = [], err = [];
    child.on("error", function(err) { cb(err); });
    child.stdout
        .on("data", function(chunk) { data.push(chunk); })
        .on("end", function() { 
        
            var str = data.join("");
        
            // stdout is outputting an extra newline to the
            // actual clipboard contents that we should remove...
            str = str.replace(/\r\n$|\n$/, "");
            cb(null, str);
    })
    ;
    child.stderr
        .on("data", function(chunk) { err.push(chunk); })
        .on("end", function() {
            if(err.length === 0) { return; }
            cb(err.join(""));
        })
    ;
};

exports.set_clipboard = set_clipboard;
exports.get_clipboard = get_clipboard;
